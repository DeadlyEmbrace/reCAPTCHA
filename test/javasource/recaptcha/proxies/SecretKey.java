// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package recaptcha.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * The secret authorizes communication between your application backend and the reCAPTCHA server to verify the user's response. The secret needs to be kept safe for security purposes. Default the Google test secret is used.
 */
public class SecretKey
{
	private final IMendixObject secretKeyMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "reCAPTCHA.SecretKey";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		secret("secret");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public SecretKey(IContext context)
	{
		this(context, Core.instantiate(context, "reCAPTCHA.SecretKey"));
	}

	protected SecretKey(IContext context, IMendixObject secretKeyMendixObject)
	{
		if (secretKeyMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("reCAPTCHA.SecretKey", secretKeyMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a reCAPTCHA.SecretKey");

		this.secretKeyMendixObject = secretKeyMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'SecretKey.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static recaptcha.proxies.SecretKey initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return recaptcha.proxies.SecretKey.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static recaptcha.proxies.SecretKey initialize(IContext context, IMendixObject mendixObject)
	{
		return new recaptcha.proxies.SecretKey(context, mendixObject);
	}

	public static recaptcha.proxies.SecretKey load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return recaptcha.proxies.SecretKey.initialize(context, mendixObject);
	}

	public static java.util.List<recaptcha.proxies.SecretKey> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<recaptcha.proxies.SecretKey> result = new java.util.ArrayList<recaptcha.proxies.SecretKey>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//reCAPTCHA.SecretKey" + xpathConstraint))
			result.add(recaptcha.proxies.SecretKey.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of secret
	 */
	public final String getsecret()
	{
		return getsecret(getContext());
	}

	/**
	 * @param context
	 * @return value of secret
	 */
	public final String getsecret(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.secret.toString());
	}

	/**
	 * Set value of secret
	 * @param secret
	 */
	public final void setsecret(String secret)
	{
		setsecret(getContext(), secret);
	}

	/**
	 * Set value of secret
	 * @param context
	 * @param secret
	 */
	public final void setsecret(IContext context, String secret)
	{
		getMendixObject().setValue(context, MemberNames.secret.toString(), secret);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return secretKeyMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final recaptcha.proxies.SecretKey that = (recaptcha.proxies.SecretKey) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "reCAPTCHA.SecretKey";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
